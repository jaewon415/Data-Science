z.alpha <- 1.96
for(i in 1:length(z0)) {
interval <- pnorm(2*z0[i] + c(-1, 1) * z.alpha)
bc.int <- quantile(boot.coefficient, interval)
print(bc.int)
print("")
}
boot.coefficient
z.alpha <- 1.96
for(i in 1:length(z0)) {
interval <- pnorm(2*z0[i] + c(-1, 1) * z.alpha)
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- colMeans(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0[i] + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
boot.coefficient[, i]
coef(hormone.linear_model)
coef(hormone.linear_model)[i]
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- colMeans(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0[i] + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0[i] + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
greater.value <- mean(boot.coefficient[, 2] > coef(hormone.linear_model)[2])
greater.value
z0 <- qnorm(1 - greater.value)
z0
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
hormone.data = read.table("http://faculty.washington.edu/harin/StatQSci403/hormone_data.txt", header = TRUE)
hormone.linear_model = lm(amount ~ lot + hours, data = hormone.data)
#This is the residual found in linear model function
residual <- residuals(hormone.linear_model)
#This is the fitted value from the linear model function (Y)
fitted.value = fitted(hormone.linear_model)
#Plot residual against fitted value
plot(fitted.value, residual)
abline(h = 0, col=2)
boot.size = 1000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
set.seed(1)
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2*z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z0 <- qnorm(1 - greater.value)
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
interval <- pnorm(2 * z0 + c(-1, 1) * z.alpha)
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
z.alpha <- 1.96
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
for(i in 1:length(z0)) {
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bc.int <- quantile(boot.coefficient[, i], interval)
print(bc.int)
}
for(i in 1:length(z0)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
}
hormone.data = read.table("http://faculty.washington.edu/harin/StatQSci403/hormone_data.txt", header = TRUE)
hormone.linear_model = lm(amount ~ lot + hours, data = hormone.data)
#This is the residual found in linear model function
residual <- residuals(hormone.linear_model)
#This is the fitted value from the linear model function (Y)
fitted.value = fitted(hormone.linear_model)
#Plot residual against fitted value
plot(fitted.value, residual)
abline(h = 0, col=2)
```{r}
#Bootstrapping size and preparation for the bootsrap
boot.size = 1000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
set.seed(1)
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
for(i in 1:length(z0)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
}
#Bootstrapping size and preparation for the bootsrap
boot.size = 1000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
set.seed(1)
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
for(i in 1:length(z0)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
}
hormone.data = read.table("http://faculty.washington.edu/harin/StatQSci403/hormone_data.txt", header = TRUE)
hormone.linear_model = lm(amount ~ lot + hours, data = hormone.data)
#This is the residual found in linear model function
residual <- residuals(hormone.linear_model)
#This is the fitted value from the linear model function (Y)
fitted.value = fitted(hormone.linear_model)
#Plot residual against fitted value
plot(fitted.value, residual)
abline(h = 0, col=2)
#Bootstrapping size and preparation for the bootsrap
boot.size = 1000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
set.seed(1)
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
for(i in 1:length(z0)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
}
for(i in 1:4) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
}
for(i in 1:4) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
print(bias.interval)
}
#Bootstrapping size and preparation for the bootsrap
boot.size = 10000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
set.seed(1)
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
for(i in 1:ncol(boot.coefficient)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
print(bias.interval)
}
head(boot.coefficient)
hist(boot.coefficient[, 1])
head(hormone.data)
resid()
residual
hist(boot.coefficient[, 2])
hist(boot.coefficient[, 3])
hist(boot.coefficient[, 4])
bias.interval
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
boot.size = 1000
#Bootstrapping method
for (i in 1:boot.size){
boot.index <- sample(1:num, size=num, replace=TRUE)
#Get the row data
boot.data = hormone.data[boot.index,]
## use lm function by using newly extracted data
boot.linear.model = lm(amount ~ lot + hours, data=boot.data)
boot.coefficient[i,] = coef(boot.linear.model)
}
hist(boot.coefficient[, 1])
hist(boot.coefficient[, 2])
hist(boot.coefficient[, 3])
hist(boot.coefficient[, 4])
for(i in 1:ncol(boot.coefficient)) {
z.alpha <- 1.96
#Calculate only the value that is greater than the observed coefficient
greater.value <- mean(boot.coefficient[, i] > coef(hormone.linear_model)[i])
#Inverse of CDF to get approximated value for z0
phi.z0 <- qnorm(1 - greater.value)
interval <- pnorm(2 * phi.z0 + c(-1, 1) * z.alpha)
#Bias corrected and acceralated confidence interval is printed
bias.interval <- quantile(boot.coefficient[, i], interval)
print(bias.interval)
}
data = read.table("http://faculty.washington.edu/harin/StatQSci403/irished_data.txt",sep=",",header=TRUE)
head(data)
saheart = read.table("http://faculty.washington.edu/harin/StatQSci403/SAheart.data", sep=",",head=T,row.names=1)
head(saheart)
boxplot(tobacco ~ chd, data = saheart, xlab="Heart Disease Indicator",
ylab="tobacco", cex.lab=1.5, cex.axis=1.5)
my.glm = glm(formula = chd ~ tobacco, family = binomial(link = logit), data=saheart)
my.glm
head(data)
my.glm = glm(formula = chd ~ tobacco, family = binomial(link = logit), data=saheart)
unique(data$lvcert)
glm.function1 = glm(formula = lvcert ~ DVRT, family = binomial(link = logit), data=data)
glm.function2 = glm(formula = lvcert ~ fathocc, family = binomial(link = logit), data=data)
glm.function3 = glm(formula = lvcert ~ schltype, family = binomial(link = logit), data=data)
print(glm.function1)
print(glm.function2)
print(glm.function3)
glm.function1 = glm(formula = lvcert ~ DVRT, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
data = read.table("http://faculty.washington.edu/harin/StatQSci403/irished_data.txt",sep=",",header=TRUE)
glm.function1 = glm(formula = DVRT ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
glm.function2 = glm(formula = fathocc ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function2)
coef(glm.function2)
glm.function3 = glm(formula = schltype ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function3)
coef(glm.function3)
glm.function1 = glm(formula = DVRT ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
glm.function1 = glm(formula = DVRT ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
glm.function2 = glm(formula = fathocc ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function2)
coef(glm.function2)
glm.function3 = glm(formula = schltype ~ lvcert, family = binomial(link = logit), data=data)
summary(glm.function3)
coef(glm.function3)
glm.function1 = glm(formula = lvcert ~ DVRT, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
?glm
exp(confint(glm.function1))
(exp(glm.function1$coefficients))
head(data)
glm.function1 = glm(formula = lvcert ~ DVRT, family = binomial(link = logit), data=data)
summary(glm.function1)
coef(glm.function1)
qchisq(0.95, 498)
data2 <- subset(data, DVRT == 115 & lvcert == 1 & schltype == 0)
View(data)
boot.size = 1000
boot.coefficient = matrix(0, boot.size,4)
colnames(boot.coefficient) = c("Lot A", "Lot B offset", "Lot C offset", "Hours")
num = nrow(hormone.data)
setwd("C:/Users/jaewo/Desktop/datasciencecoursera/UCI Data Analysis")
write.table(working.data.dcast, file = "UCI.tidy.txt", row.names = FALSE)
library(data.table)
library(dplyr)
file.url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp.dir <- tempdir()
setwd(temp.dir)
download.file(file.url, basename(file.url))
con <- unzip(zipfile = grep(pattern = ".zip", x = list.files(temp.dir), value = TRUE))
#Reads the train and test data provided in the file
activity.labels <- fread("./UCI HAR Dataset/activity_labels.txt")
features <- fread("./UCI HAR Dataset/features.txt")
x_train <- fread("./UCI HAR Dataset/train/X_train.txt")
y_train <- fread("./UCI HAR Dataset/train/y_train.txt")
subject_train <- fread("./UCI HAR Dataset/train/subject_train.txt")
x_test <- fread("./UCI HAR Dataset/test/X_test.txt")
y_test <- fread("./UCI HAR Dataset/test/y_test.txt")
subject_test <- fread("./UCI HAR Dataset/test/subject_test.txt")
unlink(temp.dir, recursive = TRUE)
#Merges the train and test data together
column.name <- c(as.character(features$V2), "activity", "subject")
test <- cbind(x_test, y_test, subject_test)
colnames(test) <- column.name
train <- cbind(x_train, y_train, subject_train)
colnames(train) <- column.name
one.data <- rbind(test, train)
######Working data
working.data <- one.data
#Cleanup the environment
rm(test, train, x_train, y_train, x_test, y_test)
rm(subject_test, subject_train)
rm(con, file.url, temp.dir)
#Extract mean and standard deviation
column.select <- grep(pattern = "-[Mm]ean\\(\\)|-[Ss]td\\(\\)",x = column.name)
column.list <- c(column.select, 562, 563)
working.data <- subset(x = working.data, select = column.list)
rm(column.select, column.list)
#Descriptive activity names to name the activities
activity.labels <- as.data.frame(activity.labels)
for(i in 1:nrow(working.data)) {
row <- working.data$activity[i]
label <- activity.labels[row, 2]
working.data$activity[i] <- label
}
rm(activity.labels)
#Use appropriate label for the data
list.of.labels <- names(working.data)
list.of.labels <- gsub(pattern = "\\(\\)", replacement = "", x = list.of.labels)
list.of.labels <- gsub(pattern = "^[Ff]", replacement = "Frequency.", x = list.of.labels)
list.of.labels <- gsub(pattern = "^[Tt]", replacement = "Time.", x = list.of.labels)
list.of.labels <- gsub(pattern = "Acc", replacement = ".Acceleration.", x = list.of.labels)
list.of.labels <- gsub(pattern = "Mag", replacement = "Magnitude", x = list.of.labels)
list.of.labels <- gsub(pattern = "BodyBody", replacement = "Body", x = list.of.labels)
list.of.labels <- gsub(pattern = "-", replacement = ".", x = list.of.labels)
list.of.labels <- gsub(pattern = "\\.\\.", replacement = ".", x = list.of.labels)
colnames(working.data) <- list.of.labels
#Independent tidy dataset with the average of variable
working.data.melt <- melt(working.data, id.vars = c("activity", "subject"))
working.data.dcast <- dcast(working.data.melt, activity + subject ~ variable, mean)
write.table(working.data.dcast, file = "UCI.tidy.txt", row.names = FALSE)
setwd("C:/Users/jaewo/Desktop/datasciencecoursera/UCI Data Analysis")
write.table(working.data.dcast, file = "UCI.tidy.txt", row.names = FALSE)
