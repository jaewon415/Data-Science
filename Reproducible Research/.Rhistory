by.day[[names(total.step.day[1])]]$steps
by.day[[names(total.step.day[3])]]$steps
by.day
by.day[[i]]
by.day[[1]]
by.day[[1]]
by.day[[2]]
by.day[[3]]
by.day[[5]]
View(activity)
is.na(activity$steps)
tappy
tapply(activity$steps, activity$interval, mean)
tapply(activity$steps, activity$interval, mean, simplify = TRUE)
tapply(activity$steps, activity$interval, mean, na.rm = TRUE, simplify = TRUE)
transform.dcast
transform.dcast[2]
by.day.impute <- by.day
for(i in 1:length(total.step.day)) {
if (is.na(total.step.day[[i]])) {
by.day.impute[[names(total.step.day[i])]]$steps <- transform.dcast[2]
}
}
by.day.impute
head(by.day.impute)
plot(transform.dcast$interval, transform.dcast$steps, type = "l",
xlab = "Interval (5 minutes)", ylab = "Average steps",
main = "Average Daily Pattern", lwd = 1.5)
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step.impute <- data.frame(Date = as.Date(names(total.step.day.impute)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
}
data.frame()
by.day.impute <- by.day
for(i in 1:length(total.step.day)) {
if (is.na(total.step.day[[i]])) {
by.day.impute[[names(total.step.day[i])]]$steps <- transform.dcast[2]
}
}
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step.impute <- data.frame(Date = as.Date(names(total.step.day.impute)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
}
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30 (Imputed NA Values)")
```
("activity.csv", sep = ",")
activity <- read.csv("activity.csv", sep = ",")
#Split the dataframe by the date. Assuming that the days are continuous
by.day <- split(activity, activity$date)
total.step.day <- lapply(X = by.day, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step <- data.frame(Date = as.Date(names(total.step.day)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step[i, 2] <- total.step.day[[i]]
}
#Plots the day and total step
plot(data.frame.step$Date, data.frame.step$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
mean.step <- mean(data.frame.step$total, na.rm = TRUE)
median.step <- median(data.frame.step$total, na.rm = TRUE)
library(reshape2)
#install.packages("reshape2") #install the package if you do not have the package
library(reshape2)
#Process the original data so that it is appropriate for this question.
transform.melt <- melt(activity, id.vars = "interval", measure.vars = "steps", na.rm = TRUE)
transform.dcast <- dcast(transform.melt, formula = interval ~ variable, mean)
#Plots the data in time series
plot(transform.dcast$interval, transform.dcast$steps, type = "l",
xlab = "Interval (5 minutes)", ylab = "Average steps",
main = "Average Daily Pattern", lwd = 1.5)
maximum.steps <- max(transform.dcast$steps)
maximum.index <- grep(maximum.steps, transform.dcast$steps)
maximum.interval <- transform.dcast[maximum.index, 1]
not.available <- is.na(activity$steps)
#Number of NA's in the steps column of the dataset. True if NA
table(not.available)
nas <- sum(is.na(activity$steps))
print(paste("There are total of", nas, "NAs"))
by.day.impute <- by.day
for(i in 1:length(total.step.day)) {
if (is.na(total.step.day[[i]])) {
by.day.impute[[names(total.step.day[i])]]$steps <- transform.dcast[2]
}
}
by.day.impute
by.day.impute[[1]]
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
head(total.step.day.impute)
hist(data.frame.step.impute)
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step.impute <- data.frame(Date = as.Date(names(total.step.day.impute)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
}
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30 (Imputed NA Values)")
```
hist(x = data.frame.step.impute$total)
hist(x = data.frame.step.impute$total, breaks = 1000)
hist(x = data.frame.step.impute$total, breaks = 100)
hist(x = data.frame.step.impute$total, breaks = 10)
hist(x = data.frame.step.impute$total, breaks = 10)
hist(x = data.frame.step.impute$total, breaks = 5)
hist(x = data.frame.step.impute$total, breaks = 15)
hist(x = data.frame.step.impute$total, breaks = 20)
mean(data.frame.step.impute$total)
median(data.frame.step.impute$total)
mean(data.frame.step.impute$total, na.rm = TRUE)
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
Date
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
impute.mean <- mean(data.frame.step.impute$total)
impute.median <- median(data.frame.step.impute$total)
difference.mean <- paste(((impute.mean - mean.step) / mean.step) * 100, "%", sep = "")
difference.mean <- paste(((impute.mean - mean.step) / mean.step) * 100, "%")
difference.median <- paste(((impute.median - median.step) / median.step) * 100, "%")
difference.mean <- paste(((impute.mean - mean.step) / mean.step) * 100, "%")
difference.median <- paste(((impute.median - median.step) / median.step) * 100, "%")
plot(data.frame.step$Date, data.frame.step$total, type ="h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
?weekdays
weekdays("2012-02-21")
weekdays(activity$date)
week.date <- data.frame.step.impute
week.date <- transform(data.frame.step.impute, as.Date(data.frame.step.impute$Date))
week.date
by.day.impute
remove(week.date)
weekdays(names(by.day.impute))
weekdays(as.Date(names(by.day.impute)))
weekdays(as.Date(names(by.day.impute)[1]))
weekdays(as.Date(names(by.day.impute)[1])) == "monday"
weekdays(as.Date(names(by.day.impute)[1])) == "월요일"
week.date <- data.frame(steps = NA, date = NA)
week.date <- data.frame(steps = NA, date = NA, interval = NA, type = NA)
by.day.impute[[1]]
by.day.impute[[2]]
week.date <- data.frame(steps = NA, date = NA, interval = NA, type = NA)
for(i in 1:length(by.day.impute)) {
week.date <- rbind(week.date, by.day.impute[[i]])
}
week.date <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
week.date <- rbind(week.date, by.day.impute[[i]])
}
week.date
View(week.date)
View(week.date)
by.day.impute[[1]]
week.date <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
week.date <- merge(week.date, by.day.impute[[i]])
}
week.date <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
week.date <- cbind(week.date, by.day.impute[[i]])
}
View(week.date)
melt(data = week.data)
melt(data = week.date)
remove(week.date)
by.day.impute[[1]]
by.day.impute[[1]][2]
by.day.impute[[1]][[2]]
by.day.impute[[1]]
by.day.impute[[1]][1,]
week.data <- data.frame(steps = NA, date = NA, interval = NA, type = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,])
}
}
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,])
}
}
View(week.data)
week.data <- week.data[, 2:nrow(week.data)]
week.data <- week.data[2:nrow(week.data),]
week.data$type <- NA
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.date[i, 4] <- ifelse(date == "일요일" | date == "토요일", weekend, weekday)
}
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.date[i, 4] <- ifelse(date == "일요일" | date == "토요일", "weekend", "weekday")
}
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.date[i, 4] <- ifelse(weekdays(date) == "일요일" |
weekdays(date) == "토요일", "weekend", "weekday")
}
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,])
}
}
#Remove the first row, as it is NA values
week.data <- week.data[2:nrow(week.data),]
week.data$type <- NA
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.data[i, 4] <- ifelse(weekdays(date) == "일요일" |
weekdays(date) == "토요일", "weekend", "weekday")
}
head(week.data)
head(week.data, 30)
head(week.data, 90)
head(week.data, 500)
View(week.data)
week.data <- transform(week.data, as.Date(date))
class(wekk.date$date)
class(week.data$date)
week.data <- mutate(week.data, as.Date(date))
class(week.data$date)
week.data$date <- as.Date(week.data$date)
week.data$date <- as.Date(week.data$date)
week.data$type <- as.factor(week.data$type)
class(week.data$date)
head(week.data)
activity <- read.csv("activity.csv", sep = ",")
#Split the dataframe by the date. Assuming that the days are continuous
by.day <- split(activity, activity$date)
total.step.day <- lapply(X = by.day, FUN = function(x) {sum(x$steps)})
data.frame.step <- data.frame(Date = as.Date(names(total.step.day)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step[i, 2] <- total.step.day[[i]]
plot(data.frame.step$Date, data.frame.step$total, type ="h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
#Plots the day and total step
main = "Total number of steps per day from 10-01 to 11-30")
}
#Makes the dataframe with the date and its total step
library(reshape2)
#Process the original data so that it is appropriate for this question.
transform.melt <- melt(activity, id.vars = "interval", measure.vars = "steps", na.rm = TRUE)
transform.dcast <- dcast(transform.melt, formula = interval ~ variable, mean)
#Plots the data in time series
plot(transform.dcast$interval, transform.dcast$steps, type = "l",
main = "Average Daily Pattern", lwd = 1.5)
```
```{r max, echo = TRUE}
maximum.steps <- max(transform.dcast$steps)
xlab = "Interval (5 minutes)", ylab = "Average steps",
maximum.index <- grep(maximum.steps, transform.dcast$steps)
maximum.interval <- transform.dcast[maximum.index, 1]
by.day.impute <- by.day
for(i in 1:length(total.step.day)) {
if (is.na(total.step.day[[i]])) {
by.day.impute[[names(total.step.day[i])]]$steps <- transform.dcast[2]
}
}
#Makes the dataframe with the date and its total step
data.frame.step.impute <- data.frame(Date = as.Date(names(total.step.day.impute)), total = NA)
for(i in 1:nrow(data.frame.step)) {
}
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
activity <- read.csv("activity.csv", sep = ",")
#Split the dataframe by the date. Assuming that the days are continuous
by.day <- split(activity, activity$date)
total.step.day <- lapply(X = by.day, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step <- data.frame(Date = as.Date(names(total.step.day)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step[i, 2] <- total.step.day[[i]]
}
#Plots the day and total step
plot(data.frame.step$Date, data.frame.step$total, type ="h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
#Split the dataframe by the date. Assuming that the days are continuous
by.day <- split(activity, activity$date)
total.step.day <- lapply(X = by.day, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step <- data.frame(Date = as.Date(names(total.step.day)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step[i, 2] <- total.step.day[[i]]
}
#Plots the day and total step
plot(data.frame.step$Date, data.frame.step$total, type ="h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
by.day <- split(activity, activity$date)
activity <- read.csv("activity.csv", sep = ",")
#Split the dataframe by the date. Assuming that the days are continuous
by.day <- split(activity, activity$date)
total.step.day <- lapply(X = by.day, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step <- data.frame(Date = as.Date(names(total.step.day)), total = NA)
for(i in 1:nrow(data.frame.step)) {
data.frame.step[i, 2] <- total.step.day[[i]]
}
#Plots the day and total step
plot(data.frame.step$Date, data.frame.step$total, type ="h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total number of steps per day from 10-01 to 11-30")
mean.step <- mean(data.frame.step$total, na.rm = TRUE)
median.step <- median(data.frame.step$total, na.rm = TRUE)
#install.packages("reshape2") #install the package if you do not have the package
library(reshape2)
#Process the original data so that it is appropriate for this question.
transform.melt <- melt(activity, id.vars = "interval", measure.vars = "steps", na.rm = TRUE)
transform.dcast <- dcast(transform.melt, formula = interval ~ variable, mean)
#Plots the data in time series
plot(transform.dcast$interval, transform.dcast$steps, type = "l",
xlab = "Interval (5 minutes)", ylab = "Average steps",
main = "Average Daily Pattern", lwd = 1.5)
maximum.steps <- max(transform.dcast$steps)
maximum.index <- grep(maximum.steps, transform.dcast$steps)
maximum.interval <- transform.dcast[maximum.index, 1]
```
not.available <- is.na(activity$steps)
#Number of NA's in the steps column of the dataset. True if NA
table(not.available)
nas <- sum(is.na(activity$steps))
print(paste("There are total of", nas, "NAs"))
by.day.impute <- by.day
for(i in 1:length(total.step.day)) {
if (is.na(total.step.day[[i]])) {
by.day.impute[[names(total.step.day[i])]]$steps <- transform.dcast[2]
}
}
total.step.day.impute <- lapply(X = by.day.impute, FUN = function(x) {sum(x$steps)})
#Makes the dataframe with the date and its total step
data.frame.step.impute <- data.frame(Date = as.Date(names(total.step.day.impute)), total = NA)
for(i in 1:nrow(data.frame.step)) {
}
#Plots the day and total step
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
impute.mean <- mean(data.frame.step.impute$total)
impute.median <- median(data.frame.step.impute$total)
difference.mean <- paste(((impute.mean - mean.step) / mean.step) * 100, "%")
difference.median <- paste(((impute.median - median.step) / median.step) * 100, "%")
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
}
}
#Remove the first row, as it is NA values
week.data$type <- NA
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
weekdays(date) == "토요일", "weekend", "weekday")
}
week.data[i, 4] <- ifelse(weekdays(date) == "일요일" |
week.data <- week.data[2:nrow(week.data),]
week.data <- rbind(week.data, by.day.impute[[i]][j,])
week.data$date <- as.Date(week.data$date)
week.data$type <- as.factor(week.data$type)
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,])
}
}
#Remove the first row, as it is NA values
week.data <- week.data[2:nrow(week.data),]
week.data$type <- NA
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.data[i, 4] <- ifelse(weekdays(date) == "일요일" |
weekdays(date) == "토요일", "weekend", "weekday")
}
week.data$date <- as.Date(week.data$date)
week.data$type <- as.factor(week.data$type)
View(week.data)
class(week.data$date)
ata.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
for(i in 1:nrow(data.frame.step)) {
data.frame.step.impute[i, 2] <- total.step.day.impute[[i]]
}
#Plots the day and total step
plot(data.frame.step.impute$Date, data.frame.step.impute$total, type = "h",
lwd = 5, col = "black",
xlab = "Date", ylab = "Total # of Step",
main = "Total # of steps per day from 10-01 to 11-30 (Imputed NA Values)")
transform.melt.impute <- melt(week.data, id.vars = "interval", measure.vars = "steps", na.rm = TRUE)
transform.melt.impute <- melt(week.data, id.vars = "interval")
?aggregate
aggregate(steps ~ type + interval, data = week.data)
week.data
head(week.data)
week.data.frame <- week.data
head(week.data.frame)
remove(week.data.frame)
View(week.data)
head(order(week.data))
head(sort(week.data))
by.day.impute[[i]][[j,]]
by.day.impute[[1]][[1,]]
by.day.impute[[1]][1,]
total.step.day <- lapply(X = week.data, FUN = function(x) {sum(x$steps)})
lapply(X = week.data, FUN = function(x) {sum(x$steps)})
class(week.data)
is.atomic(week.data$steps)
#Constructing Imputed missing value data.frame
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,], deparse.level = 0,)
}
}
week.data <- data.frame(steps = NA, date = NA, interval = NA)
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,], deparse.level = 0,)
}
}
for(i in 1:length(by.day.impute)) {
for(j in 1:nrow(by.day.impute[[i]])) {
week.data <- rbind(week.data, by.day.impute[[i]][j,], deparse.level = 0)
}
}
View(week.data)
names(week.data)
rownames(week.data)
rownames(week.data) <- c(1:nrow(week.data))
head(weekd.ata)
head(weekd.data)
head(week.data)
week.data <- week.data[2:nrow(week.data),]
week.data$type <- NA
for(i in 1:nrow(week.data)) {
date <- as.Date(week.data[i, 2])
week.data[i, 4] <- ifelse(weekdays(date) == "일요일" |
weekdays(date) == "토요일", "weekend", "weekday")
}
rownames(week.data) <- c(1:nrow(week.data))
week.data$date <- as.Date(week.data$date)
week.data$type <- as.factor(week.data$type)
head(week.data)
aggregate(steps ~ type + interval, week.data)
aggregate(steps ~ type + interval, data = week.data)
aggregate(steps ~ type + interval, data = week.data, FUN = mean)
class(week.data$steps)
class(as.numeric(week.data$steps))
week.data$steps <- as.numeric(week.data$steps)
View(week.data)
aggregate(steps ~ type + interval, data = week.data, FUN = mean)
View(week.data)
divided.data <- aggregate(steps ~ type + interval, week.data, mean)
head(divided.data)
library(ggplot2)
library(ggplot2)
plot.by.week <- ggplot(divided.data, mapping = aes(x = interval, y = steps))
?facet.grid
??"facet.grid"
plot.by.week + facet_grid(. ~ type) + geom_line()
plot.by.week + facet_grid(type~.) + geom_line()
?ggplot
plot.by.week <- ggplot(divided.data, mapping = aes(x = interval, y = steps))
plot.by.week + facet_grid(type~.) + geom_line(size = 3)
plot.by.week <- ggplot(divided.data, mapping = aes(x = interval, y = steps))
plot.by.week + facet_grid(type~.) + geom_line(size = 1.5)
plot.by.week <- ggplot(divided.data, mapping = aes(x = interval, y = steps))
plot.by.week + facet_grid(type~.) + geom_line(size = 1.5) + labs(title = "Activity Difference between week + days/end")
```
